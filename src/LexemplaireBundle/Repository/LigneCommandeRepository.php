<?php

namespace LexemplaireBundle\Repository;
use LexemplaireBundle\Entity; 

/**
 * LigneCommandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LigneCommandeRepository extends \Doctrine\ORM\EntityRepository
{

	public function Price($id)
	{
		$query = $this->_em->createQuery('SELECT a.libelle as designation, l.quantiteCommande as quantite, a.prix as prixu, l.quantiteCommande * a.prix as montant FROM LexemplaireBundle\Entity\Article a, LexemplaireBundle\Entity\LigneCommande l, LexemplaireBundle\Entity\Commande c WHERE c.id = :id and l.commande = :id and a.id = l.article');
			$query->setParameter(':id', $id);
			return $query->getArrayResult();
	}


	public function Total($id)
	{
		$query = $this->_em->createQuery('SELECT sum(l.quantiteCommande * a.prix) FROM LexemplaireBundle\Entity\Article a, LexemplaireBundle\Entity\LigneCommande l, LexemplaireBundle\Entity\Commande c WHERE c.id = :id and l.commande = :id and a.id= l.article');
			$query->setParameter(':id', $id);
			return $query->getSingleScalarResult();
	}

	public function Point($id)
	{
		 $qb = $this
			->createQueryBuilder('l')
			->leftJoin('l.article', 'a')
			->leftJoin('l.commande', 'c')
			->Select('a.libelle as designation')
			->addSelect('sum(l.quantiteCommande) as quantite')
			->addSelect('a.prix as prixu')
			->addSelect('sum(l.quantiteCommande)*a.prix as montant')
			->Where('c.date = :id')
			->groupBy('a.id')
			->setParameter('id', $id); 

		 return $qb->getQuery()
		 		   ->getArrayResult(); 


		/*$query = $this->_em->createQuery("SELECT a.libelle as designation,sum(l.quantiteCommande) as quantite, a.prix as prixu, sum(l.quantiteCommande)*a.prix as montant FROM LexemplaireBundle\Entity\Article a, LexemplaireBundle\Entity\LigneCommande l, LexemplaireBundle\Entity\Commande c WHERE c.id = l.commande and a.id = l.article and c.date = :id GROUP BY (l.article)");
			$query->setParameter('id', $id);
			return $query->getArrayResult();*/
	}


	public function Recette($id)
	{
		 $qb = $this
			->createQueryBuilder('l')
			->leftJoin('l.article', 'a')
			->leftJoin('l.commande', 'c')
			->Select('sum(l.quantiteCommande * a.prix)')
			->Where('c.date = :id')
			->setParameter('id', $id); 

		 return $qb->getQuery()
		 		   ->getSingleScalarResult();


		/*$query = $this->_em->createQuery("SELECT sum(l.quantiteCommande * a.prix) FROM LexemplaireBundle\Entity\Article a, LexemplaireBundle\Entity\LigneCommande l, LexemplaireBundle\Entity\Commande c WHERE c.id = l.commande and a.id = l.article and c.date = :id ");
			$query->setParameter(':id', $id);
			return $query->getSingleScalarResult();
		*/
	}


	public function PointPeriode($min, $max)
	{
		$qb = $this
			->createQueryBuilder('l')
			->leftJoin('l.article', 'a')
			->leftJoin('l.commande', 'c')
			->Select('a.libelle as designation')
			->addSelect('sum(l.quantiteCommande) as quantite')
			->addSelect('a.prix as prixu')
			->addSelect('sum(l.quantiteCommande)*a.prix as montant')
			->Where('c.date <= :max')
			->andWhere('c.date >= :min')
			->groupBy('a.id')
			->setParameter('min', $min)
			->setParameter('max', $max); 
			
		 return $qb->getQuery()
		 		   ->getArrayResult(); 
	}


	public function RecettePeriode($min, $max)
	{
		 $qb = $this
			->createQueryBuilder('l')
			->leftJoin('l.article', 'a')
			->leftJoin('l.commande', 'c')
			->Select('sum(l.quantiteCommande * a.prix)')
			->Where('c.date <= :max')
			->andWhere('c.date >= :min')
			->setParameter('min', $min)
			->setParameter('max', $max); 

		 return $qb->getQuery()
		 		   ->getSingleScalarResult();
	}

}
